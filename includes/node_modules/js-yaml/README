<h1 id='js-yaml-yaml-1-2-parser-writer-for-javascript'>JS-YAML - YAML 1.2 parser / writer for JavaScript</h1>
<p><a href="https://travis-ci.org/nodeca/js-yaml"><img src="https://travis-ci.org/nodeca/js-yaml.svg?branch=master" alt="Build Status" /></a>
<a href="https://www.npmjs.org/package/js-yaml"><img src="https://img.shields.io/npm/v/js-yaml.svg" alt="NPM version" /></a></p>

<p><strong><a href="http://nodeca.github.com/js-yaml/">Online Demo</a></strong></p>

<p>This is an implementation of <a href="http://yaml.org/">YAML</a>, a human-friendly data
serialization language. Started as <a href="http://pyyaml.org/">PyYAML</a> port, it was
completely rewritten from scratch. Now it&#39;s very fast, and supports 1.2 spec.</p>
<h2 id='installation'>Installation</h2><h3 id='yaml-module-for-node-js'>YAML module for node.js</h3><pre class="highlight plaintext"><code>npm install js-yaml
</code></pre><h3 id='cli-executable'>CLI executable</h3>
<p>If you want to inspect your YAML files from CLI, install js-yaml globally:</p>
<pre class="highlight plaintext"><code>npm install -g js-yaml
</code></pre><h4 id='usage'>Usage</h4><pre class="highlight plaintext"><code>usage: js-yaml [-h] [-v] [-c] [-t] file

Positional arguments:
  file           File with YAML document(s)

Optional arguments:
  -h, --help     Show this help message and exit.
  -v, --version  Show program's version number and exit.
  -c, --compact  Display errors in compact mode
  -t, --trace    Show stack trace on error
</code></pre><h3 id='bundled-yaml-library-for-browsers'>Bundled YAML library for browsers</h3><pre class="highlight html tab-html"><code><span class="c">&lt;!-- esprima required only for !!js/function --&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"esprima.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"js-yaml.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
<span class="nt">&lt;script </span><span class="na">type=</span><span class="s">"text/javascript"</span><span class="nt">&gt;</span>
<span class="kd">var</span> <span class="nx">doc</span> <span class="o">=</span> <span class="nx">jsyaml</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="s1">'greeting: hello\nname: world'</span><span class="p">);</span>
<span class="nt">&lt;/script&gt;</span>
</code></pre>
<p>Browser support was done mostly for the online demo. If you find any errors - feel
free to send pull requests with fixes. Also note, that IE and other old browsers
needs <a href="https://github.com/kriskowal/es5-shim">es5-shims</a> to operate.</p>

<p>Notes:</p>

<ol>
<li>We have no resources to support browserified version. Don&#39;t expect it to be
well tested. Don&#39;t expect fast fixes if something goes wrong there.</li>
<li><code>!!js/function</code> in browser bundle will not work by default. If you really need
it - load <code>esprima</code> parser first (via amd or directly).</li>
<li><code>!!bin</code> in browser will return <code>Array</code>, because browsers do not support
node.js <code>Buffer</code> and adding Buffer shims is completely useless on practice.</li>
</ol>
<h2 id='api'>API</h2>
<p>Here we cover the most &#39;useful&#39; methods. If you need advanced details (creating
your own tags), see <a href="https://github.com/nodeca/js-yaml/wiki">wiki</a> and
<a href="https://github.com/nodeca/js-yaml/tree/master/examples">examples</a> for more
info.</p>
<pre class="highlight javascript tab-javascript"><code><span class="nx">yaml</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'js-yaml'</span><span class="p">);</span>
<span class="nx">fs</span>   <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'fs'</span><span class="p">);</span>

<span class="c1">// Get document, or throw exception on error</span>
<span class="k">try</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">doc</span> <span class="o">=</span> <span class="nx">yaml</span><span class="p">.</span><span class="nx">safeLoad</span><span class="p">(</span><span class="nx">fs</span><span class="p">.</span><span class="nx">readFileSync</span><span class="p">(</span><span class="s1">'/home/ixti/example.yml'</span><span class="p">,</span> <span class="s1">'utf8'</span><span class="p">));</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">doc</span><span class="p">);</span>
<span class="p">}</span> <span class="k">catch</span> <span class="p">(</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span>
<span class="p">}</span>
</code></pre><h3 id='safeload-string-options'>safeLoad (string [ , options ])</h3>
<p><strong>Recommended loading way.</strong> Parses <code>string</code> as single YAML document. Returns a JavaScript
object or throws <code>YAMLException</code> on error. By default, does not support regexps,
functions and undefined. This method is safe for untrusted data.</p>

<p>options:</p>

<ul>
<li><code>filename</code> <em>(default: null)</em> - string to be used as a file path in
error/warning messages.</li>
<li><code>onWarning</code> <em>(default: null)</em> - function to call on warning messages.
Loader will call this function with an instance of <code>YAMLException</code> for each warning.</li>
<li><code>schema</code> <em>(default: <code>DEFAULT_SAFE_SCHEMA</code>)</em> - specifies a schema to use.

<ul>
<li><code>FAILSAFE_SCHEMA</code> - only strings, arrays and plain objects:
http://www.yaml.org/spec/1.2/spec.html#id2802346</li>
<li><code>JSON_SCHEMA</code> - all JSON-supported types:
http://www.yaml.org/spec/1.2/spec.html#id2803231</li>
<li><code>CORE_SCHEMA</code> - same as <code>JSON_SCHEMA</code>:
http://www.yaml.org/spec/1.2/spec.html#id2804923</li>
<li><code>DEFAULT_SAFE_SCHEMA</code> - all supported YAML types, without unsafe ones
(<code>!!js/undefined</code>, <code>!!js/regexp</code> and <code>!!js/function</code>):
http://yaml.org/type/</li>
<li><code>DEFAULT_FULL_SCHEMA</code> - all supported YAML types.</li>
</ul></li>
<li><code>json</code> <em>(default: false)</em> - compatibility with JSON.parse behaviour. If true, then duplicate keys in a mapping will override values rather than throwing an error.</li>
</ul>

<p>NOTE: This function <strong>does not</strong> understand multi-document sources, it throws
exception on those.</p>

<p>NOTE: JS-YAML <strong>does not</strong> support schema-specific tag resolution restrictions.
So, the JSON schema is not as strictly defined in the YAML specification.
It allows numbers in any notation, use <code>Null</code> and <code>NULL</code> as <code>null</code>, etc.
The core schema also has no such restrictions. It allows binary notation for integers.</p>
<h3 id='load-string-options'>load (string [ , options ])</h3>
<p><strong>Use with care with untrusted sources</strong>. The same as <code>safeLoad()</code> but uses
<code>DEFAULT_FULL_SCHEMA</code> by default - adds some JavaScript-specific types:
<code>!!js/function</code>, <code>!!js/regexp</code> and <code>!!js/undefined</code>. For untrusted sources, you
must additionally validate object structure to avoid injections:</p>
<pre class="highlight javascript tab-javascript"><code><span class="kd">var</span> <span class="nx">untrusted_code</span> <span class="o">=</span> <span class="s1">'"toString": !&lt;tag:yaml.org,2002:js/function&gt; "function (){very_evil_thing();}"'</span><span class="p">;</span>

<span class="c1">// I'm just converting that string, what could possibly go wrong?</span>
<span class="nx">require</span><span class="p">(</span><span class="s1">'js-yaml'</span><span class="p">).</span><span class="nx">load</span><span class="p">(</span><span class="nx">untrusted_code</span><span class="p">)</span> <span class="o">+</span> <span class="s1">''</span>
</code></pre><h3 id='safeloadall-string-iterator-options'>safeLoadAll (string [, iterator] [, options ])</h3>
<p>Same as <code>safeLoad()</code>, but understands multi-document sources. Applies
<code>iterator</code> to each document if specified, or returns array of documents.</p>
<pre class="highlight javascript tab-javascript"><code><span class="kd">var</span> <span class="nx">yaml</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'js-yaml'</span><span class="p">);</span>

<span class="nx">yaml</span><span class="p">.</span><span class="nx">safeLoadAll</span><span class="p">(</span><span class="nx">data</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">doc</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">doc</span><span class="p">);</span>
<span class="p">});</span>
</code></pre><h3 id='loadall-string-iterator-options'>loadAll (string [, iterator] [ , options ])</h3>
<p>Same as <code>safeLoadAll()</code> but uses <code>DEFAULT_FULL_SCHEMA</code> by default.</p>
<h3 id='safedump-object-options'>safeDump (object [ , options ])</h3>
<p>Serializes <code>object</code> as a YAML document. Uses <code>DEFAULT_SAFE_SCHEMA</code>, so it will
throw an exception if you try to dump regexps or functions. However, you can
disable exceptions by setting the <code>skipInvalid</code> option to <code>true</code>.</p>

<p>options:</p>

<ul>
<li><code>indent</code> <em>(default: 2)</em> - indentation width to use (in spaces).</li>
<li><code>noArrayIndent</code> <em>(default: false)</em> - when true, will not add an indentation level to array elements</li>
<li><code>skipInvalid</code> <em>(default: false)</em> - do not throw on invalid types (like function
in the safe schema) and skip pairs and single values with such types.</li>
<li><code>flowLevel</code> (default: -1) - specifies level of nesting, when to switch from
block to flow style for collections. -1 means block style everwhere</li>
<li><code>styles</code> - &quot;tag&quot; =&gt; &quot;style&quot; map. Each tag may have own set of styles.</li>
<li><code>schema</code> <em>(default: <code>DEFAULT_SAFE_SCHEMA</code>)</em> specifies a schema to use.</li>
<li><code>sortKeys</code> <em>(default: <code>false</code>)</em> - if <code>true</code>, sort keys when dumping YAML. If a
function, use the function to sort the keys.</li>
<li><code>lineWidth</code> <em>(default: <code>80</code>)</em> - set max line width.</li>
<li><code>noRefs</code> <em>(default: <code>false</code>)</em> - if <code>true</code>, don&#39;t convert duplicate objects into references</li>
<li><code>noCompatMode</code> <em>(default: <code>false</code>)</em> - if <code>true</code> don&#39;t try to be compatible with older
yaml versions. Currently: don&#39;t quote &quot;yes&quot;, &quot;no&quot; and so on, as required for YAML 1.1</li>
<li><code>condenseFlow</code> <em>(default: <code>false</code>)</em> - if <code>true</code> flow sequences will be condensed, omitting the space between <code>a, b</code>. Eg. <code>&#39;[a,b]&#39;</code>, and omitting the space between <code>key: value</code> and quoting the key. Eg. <code>&#39;{&quot;a&quot;:b}&#39;</code> Can be useful when using yaml for pretty URL query params as spaces are %-encoded.</li>
</ul>

<p>The following table show availlable styles (e.g. &quot;canonical&quot;,
&quot;binary&quot;...) available for each tag (.e.g. !!null, !!int ...). Yaml
output is shown on the right side after <code>=&gt;</code> (default setting) or <code>-&gt;</code>:</p>
<pre class="highlight plaintext"><code>!!null
  "canonical"   -&gt; "~"
  "lowercase"   =&gt; "null"
  "uppercase"   -&gt; "NULL"
  "camelcase"   -&gt; "Null"

!!int
  "binary"      -&gt; "0b1", "0b101010", "0b1110001111010"
  "octal"       -&gt; "01", "052", "016172"
  "decimal"     =&gt; "1", "42", "7290"
  "hexadecimal" -&gt; "0x1", "0x2A", "0x1C7A"

!!bool
  "lowercase"   =&gt; "true", "false"
  "uppercase"   -&gt; "TRUE", "FALSE"
  "camelcase"   -&gt; "True", "False"

!!float
  "lowercase"   =&gt; ".nan", '.inf'
  "uppercase"   -&gt; ".NAN", '.INF'
  "camelcase"   -&gt; ".NaN", '.Inf'
</code></pre>
<p>Example:</p>
<pre class="highlight javascript tab-javascript"><code><span class="nx">safeDump</span> <span class="p">(</span><span class="nx">object</span><span class="p">,</span> <span class="p">{</span>
  <span class="s1">'styles'</span><span class="p">:</span> <span class="p">{</span>
    <span class="s1">'!!null'</span><span class="p">:</span> <span class="s1">'canonical'</span> <span class="c1">// dump null as ~</span>
  <span class="p">},</span>
  <span class="s1">'sortKeys'</span><span class="p">:</span> <span class="kc">true</span>        <span class="c1">// sort object keys</span>
<span class="p">});</span>
</code></pre><h3 id='dump-object-options'>dump (object [ , options ])</h3>
<p>Same as <code>safeDump()</code> but without limits (uses <code>DEFAULT_FULL_SCHEMA</code> by default).</p>
<h2 id='supported-yaml-types'>Supported YAML types</h2>
<p>The list of standard YAML tags and corresponding JavaScipt types. See also
<a href="http://pyyaml.org/wiki/YAMLTagDiscussion">YAML tag discussion</a> and
<a href="http://yaml.org/type/">YAML types repository</a>.</p>
<pre class="highlight plaintext"><code>!!null ''                   # null
!!bool 'yes'                # bool
!!int '3...'                # number
!!float '3.14...'           # number
!!binary '...base64...'     # buffer
!!timestamp 'YYYY-...'      # date
!!omap [ ... ]              # array of key-value pairs
!!pairs [ ... ]             # array or array pairs
!!set { ... }               # array of objects with given keys and null values
!!str '...'                 # string
!!seq [ ... ]               # array
!!map { ... }               # object
</code></pre>
<p><strong>JavaScript-specific tags</strong></p>
<pre class="highlight plaintext"><code>!!js/regexp /pattern/gim            # RegExp
!!js/undefined ''                   # Undefined
!!js/function 'function () {...}'   # Function
</code></pre><h2 id='caveats'>Caveats</h2>
<p>Note, that you use arrays or objects as key in JS-YAML. JS does not allow objects
or arrays as keys, and stringifies (by calling <code>toString()</code> method) them at the
moment of adding them.</p>
<pre class="highlight yaml tab-yaml"><code><span class="nn">---</span>
<span class="pi">?</span> <span class="pi">[</span> <span class="nv">foo</span><span class="pi">,</span> <span class="nv">bar</span> <span class="pi">]</span>
<span class="pi">:</span> <span class="pi">-</span> <span class="s">baz</span>
<span class="pi">?</span> <span class="pi">{</span> <span class="nv">foo</span><span class="pi">:</span> <span class="nv">bar</span> <span class="pi">}</span>
<span class="pi">:</span> <span class="pi">-</span> <span class="s">baz</span>
  <span class="pi">-</span> <span class="s">baz</span>
</code></pre><pre class="highlight javascript tab-javascript"><code><span class="p">{</span> <span class="s2">"foo,bar"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"baz"</span><span class="p">],</span> <span class="s2">"[object Object]"</span><span class="p">:</span> <span class="p">[</span><span class="s2">"baz"</span><span class="p">,</span> <span class="s2">"baz"</span><span class="p">]</span> <span class="p">}</span>
</code></pre>
<p>Also, reading of properties on implicit block mapping keys is not supported yet.
So, the following YAML document cannot be loaded.</p>
<pre class="highlight yaml tab-yaml"><code><span class="nl">&amp;anchor</span> <span class="na">foo</span><span class="pi">:</span>
  <span class="na">foo</span><span class="pi">:</span> <span class="s">bar</span>
  <span class="nv">*anchor</span><span class="pi">:</span> <span class="s">duplicate key</span>
  <span class="na">baz</span><span class="pi">:</span> <span class="s">bat</span>
  <span class="nv">*anchor</span><span class="pi">:</span> <span class="s">duplicate key</span>
</code></pre><h2 id='breaking-changes-in-2-x-x-gt-3-x-x'>Breaking changes in 2.x.x -&gt; 3.x.x</h2>
<p>If you have not used <strong>custom</strong> tags or loader classes and not loaded yaml
files via <code>require()</code>, no changes are needed. Just upgrade the library.</p>

<p>Otherwise, you should:</p>

<ol>
<li>Replace all occurrences of <code>require(&#39;xxxx.yml&#39;)</code> by <code>fs.readFileSync()</code> +
<code>yaml.safeLoad()</code>.</li>
<li>rewrite your custom tags constructors and custom loader
classes, to conform the new API. See
<a href="https://github.com/nodeca/js-yaml/tree/master/examples">examples</a> and
<a href="https://github.com/nodeca/js-yaml/wiki">wiki</a> for details.</li>
</ol>
<h2 id='license'>License</h2>
<p>View the <a href="https://github.com/nodeca/js-yaml/blob/master/LICENSE">LICENSE</a> file
(MIT).</p>
