<h1 id='minimist'>minimist</h1>
<p>parse argument options</p>

<p>This module is the guts of optimist&#39;s argument parser without all the
fanciful decoration.</p>

<p><a href="http://ci.testling.com/substack/minimist"><img src="https://ci.testling.com/substack/minimist.png" alt="browser support" /></a></p>

<p><a href="http://travis-ci.org/substack/minimist"><img src="https://secure.travis-ci.org/substack/minimist.png" alt="build status" /></a></p>
<h1 id='example'>example</h1><pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">argv</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'minimist'</span><span class="p">)(</span><span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">2</span><span class="p">));</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">dir</span><span class="p">(</span><span class="nx">argv</span><span class="p">);</span>
</code></pre><pre class="highlight plaintext"><code>$ node example/parse.js -a beep -b boop
{ _: [], a: 'beep', b: 'boop' }
</code></pre><pre class="highlight plaintext"><code>$ node example/parse.js -x 3 -y 4 -n5 -abc --beep=boop foo bar baz
{ _: [ 'foo', 'bar', 'baz' ],
  x: 3,
  y: 4,
  n: 5,
  a: true,
  b: true,
  c: true,
  beep: 'boop' }
</code></pre><h1 id='methods'>methods</h1><pre class="highlight javascript"><code><span class="kd">var</span> <span class="nx">parseArgs</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">'minimist'</span><span class="p">)</span>
</code></pre><h2 id='var-argv-parseargs-args-opts'>var argv = parseArgs(args, opts={})</h2>
<p>Return an argument object <code>argv</code> populated with the array arguments from <code>args</code>.</p>

<p><code>argv._</code> contains all the arguments that didn&#39;t have an option associated with
them.</p>

<p>Numeric-looking arguments will be returned as numbers unless <code>opts.string</code> or
<code>opts.boolean</code> is set for that argument name.</p>

<p>Any arguments after <code>&#39;--&#39;</code> will not be parsed and will end up in <code>argv._</code>.</p>

<p>options can be:</p>

<ul>
<li><code>opts.string</code> - a string or array of strings argument names to always treat as
strings</li>
<li><code>opts.boolean</code> - a boolean, string or array of strings to always treat as
booleans. if <code>true</code> will treat all double hyphenated arguments without equal signs
as boolean (e.g. affects <code>--foo</code>, not <code>-f</code> or <code>--foo=bar</code>)</li>
<li><code>opts.alias</code> - an object mapping string names to strings or arrays of string
argument names to use as aliases</li>
<li><code>opts.default</code> - an object mapping string argument names to default values</li>
<li><code>opts.stopEarly</code> - when true, populate <code>argv._</code> with everything after the
first non-option</li>
<li><code>opts[&#39;--&#39;]</code> - when true, populate <code>argv._</code> with everything before the <code>--</code>
and <code>argv[&#39;--&#39;]</code> with everything after the <code>--</code>. Here&#39;s an example:</li>
<li><code>opts.unknown</code> - a function which is invoked with a command line parameter not
defined in the <code>opts</code> configuration object. If the function returns <code>false</code>, the
unknown option is not added to <code>argv</code>.</li>
</ul>
<pre class="highlight plaintext"><code>&gt; require('./')('one two three -- four five --six'.split(' '), { '--': true })
{ _: [ 'one', 'two', 'three' ],
  '--': [ 'four', 'five', '--six' ] }
</code></pre>
<p>Note that with <code>opts[&#39;--&#39;]</code> set, parsing for arguments still stops after the
<code>--</code>.</p>
<h1 id='install'>install</h1>
<p>With <a href="https://npmjs.org">npm</a> do:</p>
<pre class="highlight plaintext"><code>npm install minimist
</code></pre><h1 id='license'>license</h1>
<p>MIT</p>
